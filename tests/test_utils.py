import pytest
from photongraph.utils import *


# @pytest.fixture(params=[2, 4, 8, 16])
# def qudit_dim(request):
#     return request.param
#
#
# @pytest.fixture(params=[2, 4, 6, 8, 10, 12, 14, 16])
# def qudit_num(request):
#     return request.param

@pytest.mark.parametrize("qudit_dim, qudit_num, exp_result", [
    (2, 2, [(0, 0), (0, 1), (1, 0), (1, 1)]),
    (4, 4, [(0, 0, 0, 0), (0, 0, 0, 1), (0, 0, 0, 2), (0, 0, 0, 3),
            (0, 0, 1, 0), (0, 0, 1, 1), (0, 0, 1, 2), (0, 0, 1, 3),
            (0, 0, 2, 0), (0, 0, 2, 1), (0, 0, 2, 2), (0, 0, 2, 3),
            (0, 0, 3, 0), (0, 0, 3, 1), (0, 0, 3, 2), (0, 0, 3, 3),
            (0, 1, 0, 0), (0, 1, 0, 1), (0, 1, 0, 2), (0, 1, 0, 3),
            (0, 1, 1, 0), (0, 1, 1, 1), (0, 1, 1, 2), (0, 1, 1, 3),
            (0, 1, 2, 0), (0, 1, 2, 1), (0, 1, 2, 2), (0, 1, 2, 3),
            (0, 1, 3, 0), (0, 1, 3, 1), (0, 1, 3, 2), (0, 1, 3, 3),
            (0, 2, 0, 0), (0, 2, 0, 1), (0, 2, 0, 2), (0, 2, 0, 3),
            (0, 2, 1, 0), (0, 2, 1, 1), (0, 2, 1, 2), (0, 2, 1, 3),
            (0, 2, 2, 0), (0, 2, 2, 1), (0, 2, 2, 2), (0, 2, 2, 3),
            (0, 2, 3, 0), (0, 2, 3, 1), (0, 2, 3, 2), (0, 2, 3, 3),
            (0, 3, 0, 0), (0, 3, 0, 1), (0, 3, 0, 2), (0, 3, 0, 3),
            (0, 3, 1, 0), (0, 3, 1, 1), (0, 3, 1, 2), (0, 3, 1, 3),
            (0, 3, 2, 0), (0, 3, 2, 1), (0, 3, 2, 2), (0, 3, 2, 3),
            (0, 3, 3, 0), (0, 3, 3, 1), (0, 3, 3, 2), (0, 3, 3, 3),
            (1, 0, 0, 0), (1, 0, 0, 1), (1, 0, 0, 2), (1, 0, 0, 3),
            (1, 0, 1, 0), (1, 0, 1, 1), (1, 0, 1, 2), (1, 0, 1, 3),
            (1, 0, 2, 0), (1, 0, 2, 1), (1, 0, 2, 2), (1, 0, 2, 3),
            (1, 0, 3, 0), (1, 0, 3, 1), (1, 0, 3, 2), (1, 0, 3, 3),
            (1, 1, 0, 0), (1, 1, 0, 1), (1, 1, 0, 2), (1, 1, 0, 3),
            (1, 1, 1, 0), (1, 1, 1, 1), (1, 1, 1, 2), (1, 1, 1, 3),
            (1, 1, 2, 0), (1, 1, 2, 1), (1, 1, 2, 2), (1, 1, 2, 3),
            (1, 1, 3, 0), (1, 1, 3, 1), (1, 1, 3, 2), (1, 1, 3, 3),
            (1, 2, 0, 0), (1, 2, 0, 1), (1, 2, 0, 2), (1, 2, 0, 3),
            (1, 2, 1, 0), (1, 2, 1, 1), (1, 2, 1, 2), (1, 2, 1, 3),
            (1, 2, 2, 0), (1, 2, 2, 1), (1, 2, 2, 2), (1, 2, 2, 3),
            (1, 2, 3, 0), (1, 2, 3, 1), (1, 2, 3, 2), (1, 2, 3, 3),
            (1, 3, 0, 0), (1, 3, 0, 1), (1, 3, 0, 2), (1, 3, 0, 3),
            (1, 3, 1, 0), (1, 3, 1, 1), (1, 3, 1, 2), (1, 3, 1, 3),
            (1, 3, 2, 0), (1, 3, 2, 1), (1, 3, 2, 2), (1, 3, 2, 3),
            (1, 3, 3, 0), (1, 3, 3, 1), (1, 3, 3, 2), (1, 3, 3, 3),
            (2, 0, 0, 0), (2, 0, 0, 1), (2, 0, 0, 2), (2, 0, 0, 3),
            (2, 0, 1, 0), (2, 0, 1, 1), (2, 0, 1, 2), (2, 0, 1, 3),
            (2, 0, 2, 0), (2, 0, 2, 1), (2, 0, 2, 2), (2, 0, 2, 3),
            (2, 0, 3, 0), (2, 0, 3, 1), (2, 0, 3, 2), (2, 0, 3, 3),
            (2, 1, 0, 0), (2, 1, 0, 1), (2, 1, 0, 2), (2, 1, 0, 3),
            (2, 1, 1, 0), (2, 1, 1, 1), (2, 1, 1, 2), (2, 1, 1, 3),
            (2, 1, 2, 0), (2, 1, 2, 1), (2, 1, 2, 2), (2, 1, 2, 3),
            (2, 1, 3, 0), (2, 1, 3, 1), (2, 1, 3, 2), (2, 1, 3, 3),
            (2, 2, 0, 0), (2, 2, 0, 1), (2, 2, 0, 2), (2, 2, 0, 3),
            (2, 2, 1, 0), (2, 2, 1, 1), (2, 2, 1, 2), (2, 2, 1, 3),
            (2, 2, 2, 0), (2, 2, 2, 1), (2, 2, 2, 2), (2, 2, 2, 3),
            (2, 2, 3, 0), (2, 2, 3, 1), (2, 2, 3, 2), (2, 2, 3, 3),
            (2, 3, 0, 0), (2, 3, 0, 1), (2, 3, 0, 2), (2, 3, 0, 3),
            (2, 3, 1, 0), (2, 3, 1, 1), (2, 3, 1, 2), (2, 3, 1, 3),
            (2, 3, 2, 0), (2, 3, 2, 1), (2, 3, 2, 2), (2, 3, 2, 3),
            (2, 3, 3, 0), (2, 3, 3, 1), (2, 3, 3, 2), (2, 3, 3, 3),
            (3, 0, 0, 0), (3, 0, 0, 1), (3, 0, 0, 2), (3, 0, 0, 3),
            (3, 0, 1, 0), (3, 0, 1, 1), (3, 0, 1, 2), (3, 0, 1, 3),
            (3, 0, 2, 0), (3, 0, 2, 1), (3, 0, 2, 2), (3, 0, 2, 3),
            (3, 0, 3, 0), (3, 0, 3, 1), (3, 0, 3, 2), (3, 0, 3, 3),
            (3, 1, 0, 0), (3, 1, 0, 1), (3, 1, 0, 2), (3, 1, 0, 3),
            (3, 1, 1, 0), (3, 1, 1, 1), (3, 1, 1, 2), (3, 1, 1, 3),
            (3, 1, 2, 0), (3, 1, 2, 1), (3, 1, 2, 2), (3, 1, 2, 3),
            (3, 1, 3, 0), (3, 1, 3, 1), (3, 1, 3, 2), (3, 1, 3, 3),
            (3, 2, 0, 0), (3, 2, 0, 1), (3, 2, 0, 2), (3, 2, 0, 3),
            (3, 2, 1, 0), (3, 2, 1, 1), (3, 2, 1, 2), (3, 2, 1, 3),
            (3, 2, 2, 0), (3, 2, 2, 1), (3, 2, 2, 2), (3, 2, 2, 3),
            (3, 2, 3, 0), (3, 2, 3, 1), (3, 2, 3, 2), (3, 2, 3, 3),
            (3, 3, 0, 0), (3, 3, 0, 1), (3, 3, 0, 2), (3, 3, 0, 3),
            (3, 3, 1, 0), (3, 3, 1, 1), (3, 3, 1, 2), (3, 3, 1, 3),
            (3, 3, 2, 0), (3, 3, 2, 1), (3, 3, 2, 2), (3, 3, 2, 3),
            (3, 3, 3, 0), (3, 3, 3, 1), (3, 3, 3, 2), (3, 3, 3, 3)]),
    (8, 2, [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7),
            (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7),
            (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7),
            (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7),
            (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7),
            (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7),
            (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7),
            (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7)]),
    (4, 1, [(0,), (1,), (2,), (3,)])

])
def test_logical_basis(qudit_dim, qudit_num, exp_result):
    assert logical_basis(qudit_dim, qudit_num) == exp_result


@pytest.mark.parametrize("qudit_dim, qudit_num, photon_cutoff, exp_result", [
    (2, 2, 2, {(0, 0): [(1, 0, 1, 0), (1, 0, 2, 0),
                        (2, 0, 1, 0), (2, 0, 2, 0)],
               (0, 1): [(1, 0, 0, 1), (1, 0, 0, 2),
                        (2, 0, 0, 1), (2, 0, 0, 2)],
               (1, 0): [(0, 1, 1, 0), (0, 1, 2, 0),
                        (0, 2, 1, 0), (0, 2, 2, 0)],
               (1, 1): [(0, 1, 0, 1), (0, 1, 0, 2),
                        (0, 2, 0, 1), (0, 2, 0, 2)]}),
    (4, 2, 1, {(0, 0): [(1, 0, 0, 0, 1, 0, 0, 0)],
               (0, 1): [(1, 0, 0, 0, 0, 1, 0, 0)],
               (0, 2): [(1, 0, 0, 0, 0, 0, 1, 0)],
               (0, 3): [(1, 0, 0, 0, 0, 0, 0, 1)],
               (1, 0): [(0, 1, 0, 0, 1, 0, 0, 0)],
               (1, 1): [(0, 1, 0, 0, 0, 1, 0, 0)],
               (1, 2): [(0, 1, 0, 0, 0, 0, 1, 0)],
               (1, 3): [(0, 1, 0, 0, 0, 0, 0, 1)],
               (2, 0): [(0, 0, 1, 0, 1, 0, 0, 0)],
               (2, 1): [(0, 0, 1, 0, 0, 1, 0, 0)],
               (2, 2): [(0, 0, 1, 0, 0, 0, 1, 0)],
               (2, 3): [(0, 0, 1, 0, 0, 0, 0, 1)],
               (3, 0): [(0, 0, 0, 1, 1, 0, 0, 0)],
               (3, 1): [(0, 0, 0, 1, 0, 1, 0, 0)],
               (3, 2): [(0, 0, 0, 1, 0, 0, 1, 0)],
               (3, 3): [(0, 0, 0, 1, 0, 0, 0, 1)]}),
    (8, 1, 1, {(0,): [(1, 0, 0, 0, 0, 0, 0, 0)],
               (1,): [(0, 1, 0, 0, 0, 0, 0, 0)],
               (2,): [(0, 0, 1, 0, 0, 0, 0, 0)],
               (3,): [(0, 0, 0, 1, 0, 0, 0, 0)],
               (4,): [(0, 0, 0, 0, 1, 0, 0, 0)],
               (5,): [(0, 0, 0, 0, 0, 1, 0, 0)],
               (6,): [(0, 0, 0, 0, 0, 0, 1, 0)],
               (7,): [(0, 0, 0, 0, 0, 0, 0, 1)]})
])
def test_logical_fock_states(qudit_dim, qudit_num, photon_cutoff, exp_result):
    assert logical_fock_states(qudit_dim, qudit_num, photon_cutoff) == \
           exp_result


@pytest.mark.parametrize("qudit_dim, qudit_num, exp_result", [
    (4, 2, {(0, 0): (0, 0, 0, 0), (0, 1): (0, 0, 0, 1), (0, 2): (0, 0, 1, 0),
            (0, 3): (0, 0, 1, 1), (1, 0): (0, 1, 0, 0), (1, 1): (0, 1, 0, 1),
            (1, 2): (0, 1, 1, 0), (1, 3): (0, 1, 1, 1), (2, 0): (1, 0, 0, 0),
            (2, 1): (1, 0, 0, 1), (2, 2): (1, 0, 1, 0), (2, 3): (1, 0, 1, 1),
            (3, 0): (1, 1, 0, 0), (3, 1): (1, 1, 0, 1), (3, 2): (1, 1, 1, 0),
            (3, 3): (1, 1, 1, 1)}),
    (2, 2, {(0, 0): (0, 0), (0, 1): (0, 1), (1, 0): (1, 0), (1, 1): (1, 1)}),
    (8, 1, {(0,): (0, 0, 0), (1,): (0, 0, 1), (2,): (0, 1, 0),
            (3,): (0, 1, 1), (4,): (1, 0, 0), (5,): (1, 0, 1),
            (6,): (1, 1, 0), (7,): (1, 1, 1)})
])
def test_qudit_qubit_encoding(qudit_dim, qudit_num, exp_result):
    assert qudit_qubit_encoding(qudit_dim, qudit_num) == exp_result


def test_intra_qubit_gate_set():
    pass


def test_compile_qudit_LU():
    pass


def test_efficiency_scale_factor():
    pass


def test_loss_dB_to_eff():
    pass


def test_efficiency_calc():
    pass


def test_calc_coin_rate():
    pass


def test_tensor():
    pass
