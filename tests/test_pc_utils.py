import pytest
from photongraph.photonics.pc_utils import *


def test_param_inter():
    pass


@pytest.mark.parametrize("qudit_dim, qudit_num, photon_cutoff, exp_result", [
    (2, 2, 2, {(0, 0): [(1, 0, 1, 0), (1, 0, 2, 0),
                        (2, 0, 1, 0), (2, 0, 2, 0)],
               (0, 1): [(1, 0, 0, 1), (1, 0, 0, 2),
                        (2, 0, 0, 1), (2, 0, 0, 2)],
               (1, 0): [(0, 1, 1, 0), (0, 1, 2, 0),
                        (0, 2, 1, 0), (0, 2, 2, 0)],
               (1, 1): [(0, 1, 0, 1), (0, 1, 0, 2),
                        (0, 2, 0, 1), (0, 2, 0, 2)]}),
    (4, 2, 1, {(0, 0): [(1, 0, 0, 0, 1, 0, 0, 0)],
               (0, 1): [(1, 0, 0, 0, 0, 1, 0, 0)],
               (0, 2): [(1, 0, 0, 0, 0, 0, 1, 0)],
               (0, 3): [(1, 0, 0, 0, 0, 0, 0, 1)],
               (1, 0): [(0, 1, 0, 0, 1, 0, 0, 0)],
               (1, 1): [(0, 1, 0, 0, 0, 1, 0, 0)],
               (1, 2): [(0, 1, 0, 0, 0, 0, 1, 0)],
               (1, 3): [(0, 1, 0, 0, 0, 0, 0, 1)],
               (2, 0): [(0, 0, 1, 0, 1, 0, 0, 0)],
               (2, 1): [(0, 0, 1, 0, 0, 1, 0, 0)],
               (2, 2): [(0, 0, 1, 0, 0, 0, 1, 0)],
               (2, 3): [(0, 0, 1, 0, 0, 0, 0, 1)],
               (3, 0): [(0, 0, 0, 1, 1, 0, 0, 0)],
               (3, 1): [(0, 0, 0, 1, 0, 1, 0, 0)],
               (3, 2): [(0, 0, 0, 1, 0, 0, 1, 0)],
               (3, 3): [(0, 0, 0, 1, 0, 0, 0, 1)]}),
    (8, 1, 1, {(0,): [(1, 0, 0, 0, 0, 0, 0, 0)],
               (1,): [(0, 1, 0, 0, 0, 0, 0, 0)],
               (2,): [(0, 0, 1, 0, 0, 0, 0, 0)],
               (3,): [(0, 0, 0, 1, 0, 0, 0, 0)],
               (4,): [(0, 0, 0, 0, 1, 0, 0, 0)],
               (5,): [(0, 0, 0, 0, 0, 1, 0, 0)],
               (6,): [(0, 0, 0, 0, 0, 0, 1, 0)],
               (7,): [(0, 0, 0, 0, 0, 0, 0, 1)]})
])
def test_logical_fock_states(qudit_dim, qudit_num, photon_cutoff, exp_result):
    assert logical_fock_states(qudit_dim, qudit_num, photon_cutoff) == \
           exp_result


@pytest.mark.parametrize("qudit_dim, qudit_num, exp_result", [
    (4, 2, {(0, 0): (0, 0, 0, 0), (0, 1): (0, 0, 0, 1), (0, 2): (0, 0, 1, 0),
            (0, 3): (0, 0, 1, 1), (1, 0): (0, 1, 0, 0), (1, 1): (0, 1, 0, 1),
            (1, 2): (0, 1, 1, 0), (1, 3): (0, 1, 1, 1), (2, 0): (1, 0, 0, 0),
            (2, 1): (1, 0, 0, 1), (2, 2): (1, 0, 1, 0), (2, 3): (1, 0, 1, 1),
            (3, 0): (1, 1, 0, 0), (3, 1): (1, 1, 0, 1), (3, 2): (1, 1, 1, 0),
            (3, 3): (1, 1, 1, 1)}),
    (2, 2, {(0, 0): (0, 0), (0, 1): (0, 1), (1, 0): (1, 0), (1, 1): (1, 1)}),
    (8, 1, {(0,): (0, 0, 0), (1,): (0, 0, 1), (2,): (0, 1, 0),
            (3,): (0, 1, 1), (4,): (1, 0, 0), (5,): (1, 0, 1),
            (6,): (1, 1, 0), (7,): (1, 1, 1)})
])
def test_qudit_qubit_encoding(qudit_dim, qudit_num, exp_result):
    assert qudit_qubit_encoding(qudit_dim, qudit_num) == exp_result


def test_intra_qubit_gate_set():
    pass


def test_compile_qudit_LU():
    pass


def test_efficiency_scale_factor():
    pass


def test_loss_dB_to_eff():
    pass


def test_efficiency_calc():
    pass