import pytest
import numpy as np
from photongraph.graphs.gs_utils import state_check, gs_from_sv
from photongraph.states.statevector import StateVector
from photongraph import GraphState

vector_d3_n3_gp = np.array([0.1360827635 + 0.1360827635j,
                            0.1360827635 + 0.1360827635j,
                            0.1360827635 + 0.1360827635j,
                            0.1360827635 + 0.1360827635j,
                            0.0498097488 - 0.1858925105j,
                            -0.1858925105 + 0.0498097488j,
                            0.1360827635 + 0.1360827635j,
                            -0.1858925105 + 0.0498097488j,
                            0.0498097488 - 0.1858925105j,
                            0.1360827635 + 0.1360827635j,
                            0.1360827635 + 0.1360827635j,
                            0.1360827635 + 0.1360827635j,
                            -0.1858925105 + 0.0498097488j,
                            0.0498097488 - 0.1858925105j,
                            0.1360827635 + 0.1360827635j,
                            0.0498097488 - 0.1858925105j,
                            -0.1858925105 + 0.0498097488j,
                            0.1360827635 + 0.1360827635j,
                            0.1360827635 + 0.1360827635j,
                            0.1360827635 + 0.1360827635j,
                            0.1360827635 + 0.1360827635j,
                            0.0498097488 - 0.1858925105j,
                            0.0498097488 - 0.1858925105j,
                            0.0498097488 - 0.1858925105j,
                            -0.1858925105 + 0.0498097488j,
                            -0.1858925105 + 0.0498097488j,
                            -0.1858925105 + 0.0498097488j], dtype="complex128")

vector_d3_n3_ru_not_gs = np.array([0.1360827635 + 0.1360827635j,
                                   0.0498097488 - 0.1858925105j,
                                   0.1360827635 + 0.1360827635j,
                                   -0.1858925105 + 0.0498097488j,
                                   0.0498097488 - 0.1858925105j,
                                   -0.1858925105 + 0.0498097488j,
                                   0.0498097488 - 0.1858925105j,
                                   -0.1858925105 + 0.0498097488j,
                                   0.1360827635 + 0.1360827635j,
                                   0.1360827635 + 0.1360827635j,
                                   0.0498097488 - 0.1858925105j,
                                   0.1360827635 + 0.1360827635j,
                                   0.0498097488 - 0.1858925105j,
                                   -0.1858925105 + 0.0498097488j,
                                   0.1360827635 + 0.1360827635j,
                                   0.1360827635 + 0.1360827635j,
                                   0.1360827635 + 0.1360827635j,
                                   -0.1858925105 + 0.0498097488j,
                                   0.0498097488 - 0.1858925105j,
                                   0.0498097488 - 0.1858925105j,
                                   -0.1858925105 + 0.0498097488j,
                                   0.0498097488 - 0.1858925105j,
                                   0.0498097488 - 0.1858925105j,
                                   0.1360827635 + 0.1360827635j,
                                   0.1360827635 + 0.1360827635j,
                                   0.1360827635 + 0.1360827635j,
                                   0.1360827635 + 0.1360827635j],
                                  dtype="complex128")

vector_d3_n3_lme_not_ru = np.array([0.0272420087 - 0.1905122306j,
                                    -0.1620693966 + 0.1037812494j,
                                    -0.1699338368 - 0.0903301066j,
                                    0.059781768 - 0.1829294325j,
                                    0.1741579686 - 0.0818904057j,
                                    -0.1640399455 + 0.1006376313j,
                                    -0.17501983 + 0.0800318447j,
                                    0.0745483532 + 0.1774248562j,
                                    0.1776903374 - 0.0739133314j,
                                    -0.1896129594 + 0.0329235884j,
                                    -0.054484896 + 0.1845763613j,
                                    -0.1043411236 + 0.1617095142j,
                                    0.1864516972 - 0.0476739069j,
                                    -0.1377470985 - 0.134397815j,
                                    0.1083968756 + 0.1590193485j,
                                    0.1540507749 - 0.1153490163j,
                                    -0.1812145578 - 0.0647944432j,
                                    -0.1892200327 - 0.0351114662j,
                                    0.1012658226 + 0.1636528955j,
                                    0.0699690772 + 0.1792801307j,
                                    0.1036001369 + 0.1621852295j,
                                    -0.1711345352 + 0.0880341278j,
                                    -0.0265191346 + 0.190614195j,
                                    -0.0285678862 + 0.1903179227j,
                                    -0.156123493 + 0.1125277376j,
                                    -0.0318508645 - 0.1897960965j,
                                    -0.102339975 + 0.1629833284j],
                                   dtype='complex128')

vector_d4_n4_ghz = np.zeros(256, dtype='complex128')
vector_d4_n4_ghz[0] = 1
vector_d4_n4_ghz[-1] = 1
vector_d4_n4_ghz = 1 / np.sqrt(2) * vector_d4_n4_ghz

vector_d4_n3 = np.array([(0.125 + 0j), (0.125 + 0j), (0.125 + 0j), (0.125 + 0j),
                         (0.125 + 0j), (-0.125 + 0j), (0.125 + 0j),
                         (-0.125 + 0j),
                         (0.125 + 0j), (0.125 + 0j), (0.125 + 0j), (0.125 + 0j),
                         (0.125 + 0j), (-0.125 + 0j), (0.125 + 0j),
                         (-0.125 + 0j),
                         (0.125 + 0j), (0.125 + 0j), (0.125 + 0j), (0.125 + 0j),
                         (0 + 0.125j), (-0.125 + 0j), (0 - 0.125j),
                         (0.125 + 0j),
                         (-0.125 + 0j), (0.125 + 0j), (-0.125 + 0j),
                         (0.125 + 0j),
                         (0 - 0.125j), (-0.125 + 0j), (0 + 0.125j),
                         (0.125 + 0j),
                         (0.125 + 0j), (0.125 + 0j), (0.125 + 0j), (0.125 + 0j),
                         (-0.125 + 0j), (-0.125 + 0j), (-0.125 + 0j),
                         (-0.125 + 0j),
                         (0.125 + 0j), (0.125 + 0j), (0.125 + 0j), (0.125 + 0j),
                         (-0.125 + 0j), (-0.125 + 0j), (-0.125 + 0j),
                         (-0.125 + 0j),
                         (0.125 + 0j), (0.125 + 0j), (0.125 + 0j), (0.125 + 0j),
                         (0 - 0.125j), (-0.125 + 0j), (0 + 0.125j),
                         (0.125 + 0j),
                         (-0.125 + 0j), (0.125 + 0j), (-0.125 + 0j),
                         (0.125 + 0j),
                         (0 + 0.125j), (-0.125 + 0j), (0 - 0.125j),
                         (0.125 + 0j)],
                        dtype='complex128')

vector_d2_n4 = np.array([0.25, 0.25, 0.25, -0.25,
                         0.25, -0.25, -0.25, -0.25,
                         0.25, 0.25, 0.25, -0.25,
                         -0.25, 0.25, 0.25, 0.25], dtype='complex128')


@pytest.mark.parametrize('n, d, vector, check_type, exp_result',
                         [(3, 3, vector_d3_n3_gp, 'LME', True),
                          (3, 3, vector_d3_n3_gp, 'RU', True),
                          (3, 3, vector_d3_n3_ru_not_gs, 'RU', True),
                          (3, 3, vector_d3_n3_lme_not_ru, 'RU', False),
                          (3, 3, vector_d3_n3_lme_not_ru, 'LME', True),
                          (4, 4, vector_d4_n4_ghz, 'RU', False)])
def test_state_check(n, d, vector, check_type, exp_result):
    assert state_check(StateVector(n, d, vector), check_type) == exp_result


@pytest.mark.parametrize("n, d, vector, weighted_edge_dict", [
    (3, 3, vector_d3_n3_gp, {(1, 2): 2, (0, 1): 1, (0, 1, 2): 2}),
    (3, 4, vector_d4_n3, {(1, 2): 2, (0, 1): 1, (0, 1, 2): 3}),
    (4, 2, vector_d2_n4, {(2, 3): 1, (1, 3): 1, (1, 2): 1, (0, 1): 1})])
def test_gs_from_sv(n, d, vector, weighted_edge_dict):
    assert gs_from_sv(StateVector(n, d, vector)) == \
           GraphState(weighted_edge_dict, d)


@pytest.mark.parametrize("n, d, vector, exception", [
    (3, 3, vector_d3_n3_ru_not_gs, AssertionError),
    (4, 4, vector_d4_n4_ghz, AssertionError)])
def test_gs_from_sv_exceptions(n, d, vector, exception):
    with pytest.raises(exception) as not_gs:
        gs_from_sv(StateVector(n, d, vector))
