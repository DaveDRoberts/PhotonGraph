import pytest
from collections import defaultdict
from photongraph.graphs.graphstates import GraphState, QubitGraphState
from photongraph.graphs.edges import Edge
from photongraph.states.statevector import StateVector
import numpy as np

edge_dict_d2_n8 = {(0, 1): 1, (0, 2): 1, (0, 3): 1, (0, 4): 1, (0, 5): 1,
                   (0, 6): 1, (0, 7): 1}
edge_dict_d2_n7 = {(0, 1, 3): 1, (1, 2, 6): 1, (3, 4, 5): 1}
edge_dict_d3_n4 = {(0, 1): 2, (1, 2): 1, (2, 3): 1, (0, 1, 2): 1, (1, 2, 3): 2}
edge_dict_d5_n4 = {(0, 1): 3, (1, 2): 2, (2, 3): 3, (0, 3): 1, (3,): 2}

stab_gens_d2_n8 = {0: [('X', [0], 1), ('Z', [1], 1), ('Z', [2], 1),
                       ('Z', [3], 1), ('Z', [4], 1), ('Z', [5], 1),
                       ('Z', [6], 1), ('Z', [7], 1)],
                   1: [('X', [1], 1), ('Z', [0], 1)],
                   2: [('X', [2], 1), ('Z', [0], 1)],
                   3: [('X', [3], 1), ('Z', [0], 1)],
                   4: [('X', [4], 1), ('Z', [0], 1)],
                   5: [('X', [5], 1), ('Z', [0], 1)],
                   6: [('X', [6], 1), ('Z', [0], 1)],
                   7: [('X', [7], 1), ('Z', [0], 1)]}

stab_gens_d2_n7 = {0: [('X', [0], 1), ('CZ', [1, 3], 1)],
                   1: [('X', [1], 1), ('CZ', [0, 3], 1), ('CZ', [2, 6], 1)],
                   2: [('X', [2], 1), ('CZ', [1, 6], 1)],
                   3: [('X', [3], 1), ('CZ', [0, 1], 1), ('CZ', [4, 5], 1)],
                   4: [('X', [4], 1), ('CZ', [3, 5], 1)],
                   5: [('X', [5], 1), ('CZ', [3, 4], 1)],
                   6: [('X', [6], 1), ('CZ', [1, 2], 1)]}

stab_gens_d3_n4 = {0: [('X', [0], 1), ('Z', [1], 1), ('CZ', [1, 2], 2)],
                   1: [('X', [1], 1),
                       ('Z', [0], 1),
                       ('Z', [2], 2),
                       ('CZ', [0, 2], 2),
                       ('CZ', [2, 3], 1)],
                   2: [('X', [2], 1),
                       ('Z', [1], 2),
                       ('Z', [3], 2),
                       ('CZ', [0, 1], 2),
                       ('CZ', [1, 3], 1)],
                   3: [('X', [3], 1), ('Z', [2], 2), ('CZ', [1, 2], 1)]}

stab_gens_d5_n4 = {0: [('X', [0], 1), ('Z', [1], 2), ('Z', [3], 4)],
                   1: [('X', [1], 1), ('Z', [0], 2), ('Z', [2], 3)],
                   2: [('X', [2], 1), ('Z', [1], 3), ('Z', [3], 2)],
                   3: [('X', [3], 1), ('Z', [2], 2), ('Z', [0], 4)]}

vector_d2_n8 = np.array(
    [0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j,
     -0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     -0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j,
     0.0625 + 0.j, -0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j,
     -0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j, -0.0625 + 0.j,
     0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j,
     -0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j,
     -0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j,
     -0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     -0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j,
     -0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j, -0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j,
     -0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     -0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, -0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j,
     0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j,
     -0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     -0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j,
     0.0625 + 0.j, -0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     -0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j,
     0.0625 + 0.j, -0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     -0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j,
     -0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j,
     -0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j,
     -0.0625 + 0.j, 0.0625 + 0.j, -0.0625 + 0.j, 0.0625 + 0.j, 0.0625 + 0.j,
     -0.0625 + 0.j], dtype='complex128')

vector_d2_n7 = np.array(
    [0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, -0.08838835 + 0.j, -0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, -0.08838835 + 0.j, -0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, -0.08838835 + 0.j, -0.08838835 + 0.j,
     0.08838835 + 0.j, -0.08838835 + 0.j, 0.08838835 + 0.j, -0.08838835 + 0.j,
     0.08838835 + 0.j, -0.08838835 + 0.j, 0.08838835 + 0.j, -0.08838835 + 0.j,
     0.08838835 + 0.j, -0.08838835 + 0.j, 0.08838835 + 0.j, -0.08838835 + 0.j,
     0.08838835 + 0.j, -0.08838835 + 0.j, -0.08838835 + 0.j, 0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, -0.08838835 + 0.j, -0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, -0.08838835 + 0.j, -0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j,
     0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j,
     -0.08838835 + 0.j, -0.08838835 + 0.j, -0.08838835 + 0.j, -0.08838835 + 0.j,
     -0.08838835 + 0.j, -0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j,
     0.08838835 + 0.j, -0.08838835 + 0.j, 0.08838835 + 0.j, -0.08838835 + 0.j,
     0.08838835 + 0.j, -0.08838835 + 0.j, 0.08838835 + 0.j, -0.08838835 + 0.j,
     -0.08838835 + 0.j, 0.08838835 + 0.j, -0.08838835 + 0.j, 0.08838835 + 0.j,
     -0.08838835 + 0.j, 0.08838835 + 0.j, 0.08838835 + 0.j, -0.08838835 + 0.j],
    dtype='complex128')

vector_d3_n4 = np.array(
    [0.11111111 + 0.j, 0.11111111 + 0.j,
     0.11111111 + 0.j, 0.11111111 + 0.j,
     -0.05555556 + 0.09622504j, -0.05555556 - 0.09622504j,
     0.11111111 + 0.j, -0.05555556 - 0.09622504j,
     -0.05555556 + 0.09622504j, 0.11111111 + 0.j,
     0.11111111 + 0.j, 0.11111111 + 0.j,
     -0.05555556 + 0.09622504j, -0.05555556 + 0.09622504j,
     -0.05555556 + 0.09622504j, -0.05555556 - 0.09622504j,
     -0.05555556 - 0.09622504j, -0.05555556 - 0.09622504j,
     0.11111111 + 0.j, 0.11111111 + 0.j,
     0.11111111 + 0.j, -0.05555556 - 0.09622504j,
     -0.05555556 + 0.09622504j, 0.11111111 + 0.j,
     -0.05555556 + 0.09622504j, -0.05555556 - 0.09622504j,
     0.11111111 + 0.j, 0.11111111 + 0.j,
     0.11111111 + 0.j, 0.11111111 + 0.j,
     0.11111111 + 0.j, -0.05555556 + 0.09622504j,
     -0.05555556 - 0.09622504j, 0.11111111 + 0.j,
     -0.05555556 - 0.09622504j, -0.05555556 + 0.09622504j,
     -0.05555556 - 0.09622504j, -0.05555556 - 0.09622504j,
     -0.05555556 - 0.09622504j, -0.05555556 + 0.09622504j,
     -0.05555556 + 0.09622504j, -0.05555556 + 0.09622504j,
     0.11111111 + 0.j, 0.11111111 + 0.j,
     0.11111111 + 0.j, -0.05555556 + 0.09622504j,
     -0.05555556 + 0.09622504j, -0.05555556 + 0.09622504j,
     -0.05555556 - 0.09622504j, -0.05555556 + 0.09622504j,
     0.11111111 + 0.j, 0.11111111 + 0.j,
     -0.05555556 + 0.09622504j, -0.05555556 - 0.09622504j,
     0.11111111 + 0.j, 0.11111111 + 0.j,
     0.11111111 + 0.j, 0.11111111 + 0.j,
     -0.05555556 + 0.09622504j, -0.05555556 - 0.09622504j,
     0.11111111 + 0.j, -0.05555556 - 0.09622504j,
     -0.05555556 + 0.09622504j, -0.05555556 + 0.09622504j,
     -0.05555556 + 0.09622504j, -0.05555556 + 0.09622504j,
     -0.05555556 + 0.09622504j, -0.05555556 + 0.09622504j,
     -0.05555556 + 0.09622504j, -0.05555556 + 0.09622504j,
     -0.05555556 + 0.09622504j, -0.05555556 + 0.09622504j,
     -0.05555556 - 0.09622504j, -0.05555556 - 0.09622504j,
     -0.05555556 - 0.09622504j, -0.05555556 - 0.09622504j,
     -0.05555556 + 0.09622504j, 0.11111111 + 0.j,
     -0.05555556 - 0.09622504j, 0.11111111 + 0.j,
     -0.05555556 + 0.09622504j], dtype='complex128')

vector_d5_n4 = np.array(
    [0.04 + 0.j, -0.03236068 + 0.02351141j,
     0.01236068 - 0.03804226j, 0.01236068 + 0.03804226j,
     -0.03236068 - 0.02351141j, 0.04 + 0.j,
     0.04 + 0.j, 0.04 + 0.j,
     0.04 + 0.j, 0.04 + 0.j,
     0.04 + 0.j, -0.03236068 - 0.02351141j,
     0.01236068 + 0.03804226j, 0.01236068 - 0.03804226j,
     -0.03236068 + 0.02351141j, 0.04 + 0.j,
     0.01236068 + 0.03804226j, -0.03236068 + 0.02351141j,
     -0.03236068 - 0.02351141j, 0.01236068 - 0.03804226j,
     0.04 + 0.j, 0.01236068 - 0.03804226j,
     -0.03236068 - 0.02351141j, -0.03236068 + 0.02351141j,
     0.01236068 + 0.03804226j, 0.04 + 0.j,
     -0.03236068 + 0.02351141j, 0.01236068 - 0.03804226j,
     0.01236068 + 0.03804226j, -0.03236068 - 0.02351141j,
     -0.03236068 + 0.02351141j, -0.03236068 + 0.02351141j,
     -0.03236068 + 0.02351141j, -0.03236068 + 0.02351141j,
     -0.03236068 + 0.02351141j, 0.01236068 - 0.03804226j,
     -0.03236068 + 0.02351141j, 0.04 + 0.j,
     -0.03236068 - 0.02351141j, 0.01236068 + 0.03804226j,
     0.01236068 + 0.03804226j, -0.03236068 + 0.02351141j,
     -0.03236068 - 0.02351141j, 0.01236068 - 0.03804226j,
     0.04 + 0.j, -0.03236068 - 0.02351141j,
     -0.03236068 + 0.02351141j, 0.01236068 + 0.03804226j,
     0.04 + 0.j, 0.01236068 - 0.03804226j,
     0.04 + 0.j, -0.03236068 + 0.02351141j,
     0.01236068 - 0.03804226j, 0.01236068 + 0.03804226j,
     -0.03236068 - 0.02351141j, 0.01236068 - 0.03804226j,
     0.01236068 - 0.03804226j, 0.01236068 - 0.03804226j,
     0.01236068 - 0.03804226j, 0.01236068 - 0.03804226j,
     -0.03236068 - 0.02351141j, 0.01236068 + 0.03804226j,
     0.01236068 - 0.03804226j, -0.03236068 + 0.02351141j,
     0.04 + 0.j, -0.03236068 + 0.02351141j,
     -0.03236068 - 0.02351141j, 0.01236068 - 0.03804226j,
     0.04 + 0.j, 0.01236068 + 0.03804226j,
     0.01236068 + 0.03804226j, 0.04 + 0.j,
     0.01236068 - 0.03804226j, -0.03236068 - 0.02351141j,
     -0.03236068 + 0.02351141j, 0.04 + 0.j,
     -0.03236068 + 0.02351141j, 0.01236068 - 0.03804226j,
     0.01236068 + 0.03804226j, -0.03236068 - 0.02351141j,
     0.01236068 + 0.03804226j, 0.01236068 + 0.03804226j,
     0.01236068 + 0.03804226j, 0.01236068 + 0.03804226j,
     0.01236068 + 0.03804226j, -0.03236068 + 0.02351141j,
     0.04 + 0.j, -0.03236068 - 0.02351141j,
     0.01236068 + 0.03804226j, 0.01236068 - 0.03804226j,
     -0.03236068 - 0.02351141j, 0.01236068 - 0.03804226j,
     0.04 + 0.j, 0.01236068 + 0.03804226j,
     -0.03236068 + 0.02351141j, 0.01236068 - 0.03804226j,
     -0.03236068 - 0.02351141j, -0.03236068 + 0.02351141j,
     0.01236068 + 0.03804226j, 0.04 + 0.j,
     0.04 + 0.j, -0.03236068 + 0.02351141j,
     0.01236068 - 0.03804226j, 0.01236068 + 0.03804226j,
     -0.03236068 - 0.02351141j, -0.03236068 - 0.02351141j,
     -0.03236068 - 0.02351141j, -0.03236068 - 0.02351141j,
     -0.03236068 - 0.02351141j, -0.03236068 - 0.02351141j,
     0.01236068 + 0.03804226j, 0.01236068 - 0.03804226j,
     -0.03236068 + 0.02351141j, 0.04 + 0.j,
     -0.03236068 - 0.02351141j, 0.01236068 - 0.03804226j,
     0.04 + 0.j, 0.01236068 + 0.03804226j,
     -0.03236068 + 0.02351141j, -0.03236068 - 0.02351141j,
     -0.03236068 + 0.02351141j, 0.01236068 + 0.03804226j,
     0.04 + 0.j, 0.01236068 - 0.03804226j,
     -0.03236068 - 0.02351141j, 0.04 + 0.j,
     -0.03236068 - 0.02351141j, 0.01236068 + 0.03804226j,
     0.01236068 - 0.03804226j, -0.03236068 + 0.02351141j,
     0.04 + 0.j, 0.01236068 + 0.03804226j,
     -0.03236068 + 0.02351141j, -0.03236068 - 0.02351141j,
     0.01236068 - 0.03804226j, 0.04 + 0.j,
     0.01236068 - 0.03804226j, -0.03236068 - 0.02351141j,
     -0.03236068 + 0.02351141j, 0.01236068 + 0.03804226j,
     0.04 + 0.j, -0.03236068 + 0.02351141j,
     0.01236068 - 0.03804226j, 0.01236068 + 0.03804226j,
     -0.03236068 - 0.02351141j, 0.04 + 0.j,
     0.04 + 0.j, 0.04 + 0.j,
     0.04 + 0.j, 0.04 + 0.j,
     -0.03236068 - 0.02351141j, 0.01236068 + 0.03804226j,
     0.01236068 - 0.03804226j, -0.03236068 + 0.02351141j,
     0.04 + 0.j, 0.04 + 0.j,
     0.01236068 + 0.03804226j, -0.03236068 + 0.02351141j,
     -0.03236068 - 0.02351141j, 0.01236068 - 0.03804226j,
     -0.03236068 + 0.02351141j, 0.01236068 + 0.03804226j,
     0.04 + 0.j, 0.01236068 - 0.03804226j,
     -0.03236068 - 0.02351141j, 0.01236068 - 0.03804226j,
     0.01236068 + 0.03804226j, -0.03236068 - 0.02351141j,
     0.04 + 0.j, -0.03236068 + 0.02351141j,
     0.01236068 + 0.03804226j, 0.01236068 + 0.03804226j,
     0.01236068 + 0.03804226j, 0.01236068 + 0.03804226j,
     0.01236068 + 0.03804226j, 0.01236068 + 0.03804226j,
     0.01236068 - 0.03804226j, -0.03236068 + 0.02351141j,
     0.04 + 0.j, -0.03236068 - 0.02351141j,
     0.04 + 0.j, 0.01236068 + 0.03804226j,
     -0.03236068 + 0.02351141j, -0.03236068 - 0.02351141j,
     0.01236068 - 0.03804226j, 0.01236068 - 0.03804226j,
     -0.03236068 - 0.02351141j, -0.03236068 + 0.02351141j,
     0.01236068 + 0.03804226j, 0.04 + 0.j,
     -0.03236068 - 0.02351141j, 0.04 + 0.j,
     -0.03236068 + 0.02351141j, 0.01236068 - 0.03804226j,
     0.01236068 + 0.03804226j, -0.03236068 + 0.02351141j,
     -0.03236068 + 0.02351141j, -0.03236068 + 0.02351141j,
     -0.03236068 + 0.02351141j, -0.03236068 + 0.02351141j,
     0.01236068 - 0.03804226j, -0.03236068 + 0.02351141j,
     0.04 + 0.j, -0.03236068 - 0.02351141j,
     0.01236068 + 0.03804226j, 0.04 + 0.j,
     0.01236068 + 0.03804226j, -0.03236068 + 0.02351141j,
     -0.03236068 - 0.02351141j, 0.01236068 - 0.03804226j,
     0.01236068 + 0.03804226j, 0.04 + 0.j,
     0.01236068 - 0.03804226j, -0.03236068 - 0.02351141j,
     -0.03236068 + 0.02351141j, -0.03236068 + 0.02351141j,
     0.01236068 - 0.03804226j, 0.01236068 + 0.03804226j,
     -0.03236068 - 0.02351141j, 0.04 + 0.j,
     -0.03236068 - 0.02351141j, -0.03236068 - 0.02351141j,
     -0.03236068 - 0.02351141j, -0.03236068 - 0.02351141j,
     -0.03236068 - 0.02351141j, -0.03236068 + 0.02351141j,
     0.04 + 0.j, -0.03236068 - 0.02351141j,
     0.01236068 + 0.03804226j, 0.01236068 - 0.03804226j,
     0.04 + 0.j, 0.01236068 + 0.03804226j,
     -0.03236068 + 0.02351141j, -0.03236068 - 0.02351141j,
     0.01236068 - 0.03804226j, -0.03236068 - 0.02351141j,
     -0.03236068 + 0.02351141j, 0.01236068 + 0.03804226j,
     0.04 + 0.j, 0.01236068 - 0.03804226j,
     0.01236068 + 0.03804226j, -0.03236068 - 0.02351141j,
     0.04 + 0.j, -0.03236068 + 0.02351141j,
     0.01236068 - 0.03804226j, 0.01236068 - 0.03804226j,
     0.01236068 - 0.03804226j, 0.01236068 - 0.03804226j,
     0.01236068 - 0.03804226j, 0.01236068 - 0.03804226j,
     0.04 + 0.j, 0.01236068 - 0.03804226j,
     -0.03236068 - 0.02351141j, -0.03236068 + 0.02351141j,
     0.01236068 + 0.03804226j, 0.04 + 0.j,
     -0.03236068 + 0.02351141j, 0.01236068 - 0.03804226j,
     0.01236068 + 0.03804226j, -0.03236068 - 0.02351141j,
     0.04 + 0.j, 0.04 + 0.j,
     0.04 + 0.j, 0.04 + 0.j,
     0.04 + 0.j, 0.04 + 0.j,
     -0.03236068 - 0.02351141j, 0.01236068 + 0.03804226j,
     0.01236068 - 0.03804226j, -0.03236068 + 0.02351141j,
     0.04 + 0.j, 0.01236068 + 0.03804226j,
     -0.03236068 + 0.02351141j, -0.03236068 - 0.02351141j,
     0.01236068 - 0.03804226j, 0.01236068 + 0.03804226j,
     0.04 + 0.j, 0.01236068 - 0.03804226j,
     -0.03236068 - 0.02351141j, -0.03236068 + 0.02351141j,
     -0.03236068 - 0.02351141j, 0.04 + 0.j,
     -0.03236068 + 0.02351141j, 0.01236068 - 0.03804226j,
     0.01236068 + 0.03804226j, 0.04 + 0.j,
     0.04 + 0.j, 0.04 + 0.j,
     0.04 + 0.j, 0.04 + 0.j,
     -0.03236068 + 0.02351141j, 0.04 + 0.j,
     -0.03236068 - 0.02351141j, 0.01236068 + 0.03804226j,
     0.01236068 - 0.03804226j, 0.01236068 - 0.03804226j,
     0.04 + 0.j, 0.01236068 + 0.03804226j,
     -0.03236068 + 0.02351141j, -0.03236068 - 0.02351141j,
     -0.03236068 + 0.02351141j, 0.01236068 + 0.03804226j,
     0.04 + 0.j, 0.01236068 - 0.03804226j,
     -0.03236068 - 0.02351141j, 0.01236068 + 0.03804226j,
     -0.03236068 - 0.02351141j, 0.04 + 0.j,
     -0.03236068 + 0.02351141j, 0.01236068 - 0.03804226j,
     0.04 + 0.j, 0.04 + 0.j,
     0.04 + 0.j, 0.04 + 0.j,
     0.04 + 0.j, 0.01236068 - 0.03804226j,
     -0.03236068 + 0.02351141j, 0.04 + 0.j,
     -0.03236068 - 0.02351141j, 0.01236068 + 0.03804226j,
     -0.03236068 - 0.02351141j, 0.01236068 - 0.03804226j,
     0.04 + 0.j, 0.01236068 + 0.03804226j,
     -0.03236068 + 0.02351141j, -0.03236068 - 0.02351141j,
     -0.03236068 + 0.02351141j, 0.01236068 + 0.03804226j,
     0.04 + 0.j, 0.01236068 - 0.03804226j,
     0.01236068 - 0.03804226j, 0.01236068 + 0.03804226j,
     -0.03236068 - 0.02351141j, 0.04 + 0.j,
     -0.03236068 + 0.02351141j, 0.04 + 0.j,
     0.04 + 0.j, 0.04 + 0.j,
     0.04 + 0.j, 0.04 + 0.j,
     0.01236068 + 0.03804226j, 0.01236068 - 0.03804226j,
     -0.03236068 + 0.02351141j, 0.04 + 0.j,
     -0.03236068 - 0.02351141j, -0.03236068 + 0.02351141j,
     -0.03236068 - 0.02351141j, 0.01236068 - 0.03804226j,
     0.04 + 0.j, 0.01236068 + 0.03804226j,
     0.01236068 - 0.03804226j, -0.03236068 - 0.02351141j,
     -0.03236068 + 0.02351141j, 0.01236068 + 0.03804226j,
     0.04 + 0.j, -0.03236068 + 0.02351141j,
     0.01236068 - 0.03804226j, 0.01236068 + 0.03804226j,
     -0.03236068 - 0.02351141j, 0.04 + 0.j,
     0.04 + 0.j, 0.04 + 0.j,
     0.04 + 0.j, 0.04 + 0.j,
     0.04 + 0.j, -0.03236068 - 0.02351141j,
     0.01236068 + 0.03804226j, 0.01236068 - 0.03804226j,
     -0.03236068 + 0.02351141j, 0.04 + 0.j,
     0.01236068 + 0.03804226j, -0.03236068 + 0.02351141j,
     -0.03236068 - 0.02351141j, 0.01236068 - 0.03804226j,
     0.04 + 0.j, 0.04 + 0.j,
     0.04 + 0.j, 0.04 + 0.j,
     0.04 + 0.j, 0.04 + 0.j,
     0.04 + 0.j, -0.03236068 - 0.02351141j,
     0.01236068 + 0.03804226j, 0.01236068 - 0.03804226j,
     -0.03236068 + 0.02351141j, 0.04 + 0.j,
     0.01236068 + 0.03804226j, -0.03236068 + 0.02351141j,
     -0.03236068 - 0.02351141j, 0.01236068 - 0.03804226j,
     0.04 + 0.j, 0.01236068 - 0.03804226j,
     -0.03236068 - 0.02351141j, -0.03236068 + 0.02351141j,
     0.01236068 + 0.03804226j, 0.04 + 0.j,
     -0.03236068 + 0.02351141j, 0.01236068 - 0.03804226j,
     0.01236068 + 0.03804226j, -0.03236068 - 0.02351141j,
     0.01236068 - 0.03804226j, 0.01236068 - 0.03804226j,
     0.01236068 - 0.03804226j, 0.01236068 - 0.03804226j,
     0.01236068 - 0.03804226j, 0.01236068 + 0.03804226j,
     0.01236068 - 0.03804226j, -0.03236068 + 0.02351141j,
     0.04 + 0.j, -0.03236068 - 0.02351141j,
     -0.03236068 - 0.02351141j, 0.01236068 - 0.03804226j,
     0.04 + 0.j, 0.01236068 + 0.03804226j,
     -0.03236068 + 0.02351141j, 0.04 + 0.j,
     0.01236068 - 0.03804226j, -0.03236068 - 0.02351141j,
     -0.03236068 + 0.02351141j, 0.01236068 + 0.03804226j,
     -0.03236068 + 0.02351141j, 0.01236068 - 0.03804226j,
     0.01236068 + 0.03804226j, -0.03236068 - 0.02351141j,
     0.04 + 0.j, -0.03236068 - 0.02351141j,
     -0.03236068 - 0.02351141j, -0.03236068 - 0.02351141j,
     -0.03236068 - 0.02351141j, -0.03236068 - 0.02351141j,
     -0.03236068 + 0.02351141j, 0.04 + 0.j,
     -0.03236068 - 0.02351141j, 0.01236068 + 0.03804226j,
     0.01236068 - 0.03804226j, 0.01236068 + 0.03804226j,
     -0.03236068 + 0.02351141j, -0.03236068 - 0.02351141j,
     0.01236068 - 0.03804226j, 0.04 + 0.j,
     0.04 + 0.j, 0.01236068 - 0.03804226j,
     -0.03236068 - 0.02351141j, -0.03236068 + 0.02351141j,
     0.01236068 + 0.03804226j, 0.01236068 - 0.03804226j,
     0.01236068 + 0.03804226j, -0.03236068 - 0.02351141j,
     0.04 + 0.j, -0.03236068 + 0.02351141j,
     -0.03236068 + 0.02351141j, -0.03236068 + 0.02351141j,
     -0.03236068 + 0.02351141j, -0.03236068 + 0.02351141j,
     -0.03236068 + 0.02351141j, -0.03236068 - 0.02351141j,
     0.01236068 + 0.03804226j, 0.01236068 - 0.03804226j,
     -0.03236068 + 0.02351141j, 0.04 + 0.j,
     0.01236068 - 0.03804226j, 0.04 + 0.j,
     0.01236068 + 0.03804226j, -0.03236068 + 0.02351141j,
     -0.03236068 - 0.02351141j, 0.04 + 0.j,
     0.01236068 - 0.03804226j, -0.03236068 - 0.02351141j,
     -0.03236068 + 0.02351141j, 0.01236068 + 0.03804226j,
     0.01236068 + 0.03804226j, -0.03236068 - 0.02351141j,
     0.04 + 0.j, -0.03236068 + 0.02351141j,
     0.01236068 - 0.03804226j, 0.01236068 + 0.03804226j,
     0.01236068 + 0.03804226j, 0.01236068 + 0.03804226j,
     0.01236068 + 0.03804226j, 0.01236068 + 0.03804226j,
     0.01236068 - 0.03804226j, -0.03236068 + 0.02351141j,
     0.04 + 0.j, -0.03236068 - 0.02351141j,
     0.01236068 + 0.03804226j, -0.03236068 + 0.02351141j,
     -0.03236068 - 0.02351141j, 0.01236068 - 0.03804226j,
     0.04 + 0.j, 0.01236068 + 0.03804226j,
     0.04 + 0.j, 0.01236068 - 0.03804226j,
     -0.03236068 - 0.02351141j, -0.03236068 + 0.02351141j,
     0.01236068 + 0.03804226j, -0.03236068 - 0.02351141j,
     0.04 + 0.j, -0.03236068 + 0.02351141j,
     0.01236068 - 0.03804226j, 0.01236068 + 0.03804226j,
     0.04 + 0.j, 0.01236068 + 0.03804226j,
     -0.03236068 + 0.02351141j, -0.03236068 - 0.02351141j,
     0.01236068 - 0.03804226j, 0.04 + 0.j,
     0.01236068 - 0.03804226j, -0.03236068 - 0.02351141j,
     -0.03236068 + 0.02351141j, 0.01236068 + 0.03804226j,
     0.04 + 0.j, -0.03236068 + 0.02351141j,
     0.01236068 - 0.03804226j, 0.01236068 + 0.03804226j,
     -0.03236068 - 0.02351141j, 0.04 + 0.j,
     0.04 + 0.j, 0.04 + 0.j,
     0.04 + 0.j, 0.04 + 0.j,
     0.04 + 0.j, -0.03236068 - 0.02351141j,
     0.01236068 + 0.03804226j, 0.01236068 - 0.03804226j,
     -0.03236068 + 0.02351141j, -0.03236068 + 0.02351141j,
     -0.03236068 - 0.02351141j, 0.01236068 - 0.03804226j,
     0.04 + 0.j, 0.01236068 + 0.03804226j,
     0.01236068 - 0.03804226j, -0.03236068 - 0.02351141j,
     -0.03236068 + 0.02351141j, 0.01236068 + 0.03804226j,
     0.04 + 0.j, 0.01236068 + 0.03804226j,
     -0.03236068 - 0.02351141j, 0.04 + 0.j,
     -0.03236068 + 0.02351141j, 0.01236068 - 0.03804226j,
     -0.03236068 - 0.02351141j, -0.03236068 - 0.02351141j,
     -0.03236068 - 0.02351141j, -0.03236068 - 0.02351141j,
     -0.03236068 - 0.02351141j, 0.04 + 0.j,
     -0.03236068 - 0.02351141j, 0.01236068 + 0.03804226j,
     0.01236068 - 0.03804226j, -0.03236068 + 0.02351141j,
     0.01236068 - 0.03804226j, 0.04 + 0.j,
     0.01236068 + 0.03804226j, -0.03236068 + 0.02351141j,
     -0.03236068 - 0.02351141j, -0.03236068 - 0.02351141j,
     -0.03236068 + 0.02351141j, 0.01236068 + 0.03804226j,
     0.04 + 0.j, 0.01236068 - 0.03804226j,
     -0.03236068 + 0.02351141j, 0.01236068 - 0.03804226j,
     0.01236068 + 0.03804226j, -0.03236068 - 0.02351141j,
     0.04 + 0.j, 0.01236068 + 0.03804226j,
     0.01236068 + 0.03804226j, 0.01236068 + 0.03804226j,
     0.01236068 + 0.03804226j, 0.01236068 + 0.03804226j,
     0.04 + 0.j, -0.03236068 - 0.02351141j,
     0.01236068 + 0.03804226j, 0.01236068 - 0.03804226j,
     -0.03236068 + 0.02351141j, 0.01236068 + 0.03804226j,
     -0.03236068 + 0.02351141j, -0.03236068 - 0.02351141j,
     0.01236068 - 0.03804226j, 0.04 + 0.j,
     -0.03236068 + 0.02351141j, 0.01236068 + 0.03804226j,
     0.04 + 0.j, 0.01236068 - 0.03804226j,
     -0.03236068 - 0.02351141j, -0.03236068 - 0.02351141j,
     0.04 + 0.j, -0.03236068 + 0.02351141j,
     0.01236068 - 0.03804226j, 0.01236068 + 0.03804226j,
     0.01236068 - 0.03804226j, 0.01236068 - 0.03804226j,
     0.01236068 - 0.03804226j, 0.01236068 - 0.03804226j,
     0.01236068 - 0.03804226j, 0.04 + 0.j,
     -0.03236068 - 0.02351141j, 0.01236068 + 0.03804226j,
     0.01236068 - 0.03804226j, -0.03236068 + 0.02351141j,
     -0.03236068 - 0.02351141j, 0.01236068 - 0.03804226j,
     0.04 + 0.j, 0.01236068 + 0.03804226j,
     -0.03236068 + 0.02351141j, 0.01236068 + 0.03804226j,
     0.04 + 0.j, 0.01236068 - 0.03804226j,
     -0.03236068 - 0.02351141j, -0.03236068 + 0.02351141j,
     0.01236068 - 0.03804226j, 0.01236068 + 0.03804226j,
     -0.03236068 - 0.02351141j, 0.04 + 0.j,
     -0.03236068 + 0.02351141j, -0.03236068 + 0.02351141j,
     -0.03236068 + 0.02351141j, -0.03236068 + 0.02351141j,
     -0.03236068 + 0.02351141j, -0.03236068 + 0.02351141j,
     0.04 + 0.j, -0.03236068 - 0.02351141j,
     0.01236068 + 0.03804226j, 0.01236068 - 0.03804226j,
     -0.03236068 + 0.02351141j], dtype='complex128')

edge_dict_d2_n7_add = {(0, 1, 3): 1, (0, 2, 4, 5): 1, (3, 4, 5): 1, (2, 6): 1}

edge_dict_d5_n4_add = {(0, 1): 3, (1, 2): 4, (2, 3): 3, (0, 3): 1, (3,): 2,
                       (0, 2, 1): 4}

edge_dict_d2_n7_epc = {(0, 1, 3): 1, (1, 2, 6): 1, (3, 4, 5): 1,
                       (0, 1, 4, 5): 1}
edge_dict_d5_n4_epc = {(0, 1): 3, (1, 2): 2, (2, 3): 3, (0, 3): 1, (3,): 2,
                       (0, 2): 3}

edge_dict_d2_n7_pivot = {(0, 1, 3): 1, (1, 2, 6): 1, (3, 4, 5): 1,
                         (0, 1, 4, 5): 1, (1, 3, 4, 5): 1}

edge_dict_d5_n4_pivot = {(0, 1): 1, (1, 2): 4, (2, 3): 1, (0, 3): 1, (3,): 2,
                         (0, 2): 4, (1, 3): 3}

edge_dict_d3_n4_em = {(0, 1): 2, (1, 2): 2, (2, 3): 2, (0, 1, 2): 2,
                      (1, 2, 3): 1}

edge_dict_d5_n4_em = {(0, 1): 4, (1, 2): 2, (2, 3): 3, (0, 3): 3, (3,): 2}

edge_dict_d2_n7_cp = {(0, 1, 3): 1, (1, 2, 6): 1, (3, 4, 5): 1, (1, 3, 4): 1}

edge_dict_d3_n4_cp = {(0, 1): 2, (1, 2): 1, (0, 1, 2): 1, (1, 2, 3): 2,
                      (0, 3): 2, (0, 2, 3): 1}


def gen_edges(weighted_edge_dict, qudit_dim):
    """
    Takes in dict where each key is a tuple of qubits and value is the edge
    weight e.g. {(0, 1):1, (2,3):1, (0,1,2):2}.

    Args:
        weighted_edge_dict (dict): Each key is a tuple of qubits and value
                                   is edge weight.
        qudit_dim (int): Qudit dimension.

    Returns:
        dict: Each key is a tuple of qubits and value is a Edge object.

    """

    d = qudit_dim

    edges = {}
    for qudits, weight in weighted_edge_dict.items():
        edge = Edge(qudits, int(weight % d), d)
        edges[edge.qudits] = edge

    return edges


def inc_dict_from_edges(edges):
    """
    Creates an incidence dict from a dict of Edge objects.

    Args:
        edges (dict): Contains Edges

    Returns:
        dict: incidence dict; keys are qudits, values are the edges to which
              they belong.
    """
    inc_dict = defaultdict(list)
    for edge in edges.values():
        for qudit in edge.qudits:
            inc_dict[qudit].append(edge)

    return dict(inc_dict)


@pytest.mark.parametrize('edge_dict, qudit_dim', [
    (edge_dict_d2_n8, 2),
    (edge_dict_d2_n7, 2),
    (edge_dict_d3_n4, 3),
    (edge_dict_d5_n4, 5),
])
def test_qudit_dim(edge_dict, qudit_dim):
    assert GraphState(edge_dict, qudit_dim).qudit_dim == qudit_dim


@pytest.mark.parametrize('edge_dict, qudit_dim, exp_result', [
    (edge_dict_d2_n8, 2, 8),
    (edge_dict_d2_n7, 2, 7),
    (edge_dict_d3_n4, 3, 4),
    (edge_dict_d5_n4, 5, 4),
])
def test_qudit_num(edge_dict, qudit_dim, exp_result):
    assert GraphState(edge_dict, qudit_dim).qudit_num == exp_result


@pytest.mark.parametrize('edge_dict, qudit_dim, exp_result', [
    (edge_dict_d2_n8, 2, (0, 1, 2, 3, 4, 5, 6, 7)),
    (edge_dict_d2_n7, 2, (0, 1, 2, 3, 4, 5, 6)),
    (edge_dict_d3_n4, 3, (0, 1, 2, 3)),
    (edge_dict_d5_n4, 5, (0, 1, 2, 3)),
])
def test_qudits(edge_dict, qudit_dim, exp_result):
    assert GraphState(edge_dict, qudit_dim).qudits == frozenset(exp_result)


@pytest.mark.parametrize('edge_dict, qudit_dim', [
    (edge_dict_d2_n8, 2),
    (edge_dict_d2_n7, 2),
    (edge_dict_d3_n4, 3),
    (edge_dict_d5_n4, 5),
])
def test_edges(edge_dict, qudit_dim):
    assert GraphState(edge_dict, qudit_dim).edges == \
           list(gen_edges(edge_dict, qudit_dim).values())


@pytest.mark.parametrize('edge_dict, qudit_dim', [
    (edge_dict_d2_n8, 2),
    (edge_dict_d2_n7, 2),
    (edge_dict_d3_n4, 3),
    (edge_dict_d5_n4, 5),
])
def test_incidence_dict(edge_dict, qudit_dim):
    gs = GraphState(edge_dict, qudit_dim)
    edges = gen_edges(edge_dict, qudit_dim)

    assert gs.incidence_dict == inc_dict_from_edges(edges)


@pytest.mark.parametrize('edge_dict, qudit_dim, exp_result', [
    (edge_dict_d2_n8, 2, stab_gens_d2_n8),
    (edge_dict_d2_n7, 2, stab_gens_d2_n7),
    (edge_dict_d3_n4, 3, stab_gens_d3_n4),
    (edge_dict_d5_n4, 5, stab_gens_d5_n4),
])
def test_stabilizer_gens(edge_dict, qudit_dim, exp_result):
    assert GraphState(edge_dict, qudit_dim).stabilizer_gens() == exp_result


@pytest.mark.parametrize('edge_dict, qudit_dim, qudit_num, vector', [
    (edge_dict_d2_n8, 2, 8, vector_d2_n8),
    (edge_dict_d2_n7, 2, 7, vector_d2_n7),
    (edge_dict_d3_n4, 3, 4, vector_d3_n4),
    (edge_dict_d5_n4, 5, 4, vector_d5_n4),
])
def test_state_vector(edge_dict, qudit_dim, qudit_num, vector):
    assert GraphState(edge_dict, qudit_dim).state_vector() \
           == StateVector(qudit_num, qudit_dim, vector)


@pytest.mark.parametrize('edge_dict, qudit_dim, qudit, exp_result', [
    (edge_dict_d2_n8, 2, 0, [Edge({1}, 1, 2), Edge({2}, 1, 2), Edge({3}, 1, 2),
                             Edge({4}, 1, 2), Edge({5}, 1, 2), Edge({6}, 1, 2),
                             Edge({7}, 1, 2)]),
    (edge_dict_d2_n7, 2, 3, [Edge({0, 1}, 1, 2), Edge({4, 5}, 1, 2)]),
    (edge_dict_d3_n4, 3, 2, [Edge({1}, 1, 3), Edge({3}, 1, 3),
                             Edge({0, 1}, 1, 3), Edge({1, 3}, 2, 3)]),
    (edge_dict_d5_n4, 5, 1, [Edge({0}, 3, 5), Edge({2}, 2, 5)]),
])
def test_adjacency(edge_dict, qudit_dim, qudit, exp_result):
    assert GraphState(edge_dict, qudit_dim).adjacency(qudit) == exp_result


@pytest.mark.parametrize('edge_dict, qudit_dim, edges_to_add, new_edge_dict', [
    (edge_dict_d2_n7, 2, {(1, 2, 6): 1, (0, 2, 4, 5): 1, (2, 6): 1},
     edge_dict_d2_n7_add),
    (edge_dict_d5_n4, 5, {(1, 2): 2, (0, 2, 1): 4}, edge_dict_d5_n4_add),
])
def test_add_edges(edge_dict, qudit_dim, edges_to_add, new_edge_dict):

    if qudit_dim == 2:
        edge_list = [edge for edge in edge_dict.keys()]
        new_edge_list = [edge for edge in new_edge_dict.keys()]
        edges_to_add_list = [edge for edge in edges_to_add.keys()]
        gs = QubitGraphState(edge_list)
        gs.add_edges(edges_to_add_list)
        assert gs == QubitGraphState(new_edge_list)
    else:
        gs = GraphState(edge_dict, qudit_dim)
        gs.add_edges(edges_to_add)
        assert gs == GraphState(new_edge_dict, qudit_dim)


@pytest.mark.parametrize('edge_dict, qudit_dim, qudit, new_edge_dict', [
    (edge_dict_d2_n7, 2, 3, edge_dict_d2_n7_epc),
    (edge_dict_d5_n4, 5, 3, edge_dict_d5_n4_epc),
])
def test_EPC(edge_dict, qudit_dim, qudit, new_edge_dict):

    if qudit_dim == 2:
        edge_list = [edge for edge in edge_dict.keys()]
        new_edge_list = [edge for edge in new_edge_dict.keys()]
        gs = QubitGraphState(edge_list)
        gs.EPC(qudit)
        assert gs == QubitGraphState(new_edge_list)
    else:
        gs = GraphState(edge_dict, qudit_dim)
        gs.EPC(qudit)
        assert gs == GraphState(new_edge_dict, qudit_dim)


@pytest.mark.parametrize('edge_dict, qudit_dim, qudit_a, qudit_b, new_edge_dict', [
    (edge_dict_d2_n7, 2, 0, 3, edge_dict_d2_n7_pivot),
    (edge_dict_d5_n4, 5, 3, 0, edge_dict_d5_n4_pivot),
])
def test_pivot(edge_dict, qudit_dim, qudit_a, qudit_b, new_edge_dict):

    if qudit_dim == 2:
        edge_list = [edge for edge in edge_dict.keys()]
        new_edge_list = [edge for edge in new_edge_dict.keys()]
        gs = QubitGraphState(edge_list)
        gs.pivot(qudit_a, qudit_b)
        assert gs == QubitGraphState(new_edge_list)
    else:
        gs = GraphState(edge_dict, qudit_dim)
        gs.pivot(qudit_a, qudit_b)
        assert gs == GraphState(new_edge_dict, qudit_dim)


@pytest.mark.parametrize('edge_dict, qudit_dim, qudit, m, new_edge_dict', [
    (edge_dict_d3_n4, 3, 2, 2, edge_dict_d3_n4_em),
    (edge_dict_d5_n4, 5, 0, 3, edge_dict_d5_n4_em),
])
def test_EM(edge_dict, qudit_dim, qudit, m, new_edge_dict):

    if qudit_dim == 2:
        edge_list = [edge for edge in edge_dict.keys()]
        new_edge_list = [edge for edge in new_edge_dict.keys()]
        gs = QubitGraphState(edge_list)
        gs.EM(qudit, m)
        assert gs == QubitGraphState(new_edge_list)
    else:
        gs = GraphState(edge_dict, qudit_dim)
        gs.EM(qudit, m)
        assert gs == GraphState(new_edge_dict, qudit_dim)


@pytest.mark.parametrize('edge_dict, qudit_dim, targ, ctrls, new_edge_dict', [
    (edge_dict_d2_n7, 2, 0, {3, 4}, edge_dict_d2_n7_cp),
    (edge_dict_d3_n4, 3, 1, {3}, edge_dict_d3_n4_cp),
])
def test_ctrl_perm(edge_dict, qudit_dim, targ, ctrls, new_edge_dict):

    if qudit_dim == 2:
        edge_list = [edge for edge in edge_dict.keys()]
        new_edge_list = [edge for edge in new_edge_dict.keys()]
        gs = QubitGraphState(edge_list)
        gs.ctrl_perm(targ, ctrls)
        assert gs == QubitGraphState(new_edge_list)
    else:
        gs = GraphState(edge_dict, qudit_dim)
        gs.ctrl_perm(targ, ctrls)
        assert gs == GraphState(new_edge_dict, qudit_dim)


def test_measure_X():
    pass


def test_measure_Y():
    pass


@pytest.mark.parametrize('edge_dict, qudit_dim, qudit, state, new_edge_dict', [
    (edge_dict_d2_n7, 2, 0, 0, {(1, 2, 6): 1, (3, 4, 5): 1}),
    (edge_dict_d2_n7, 2, 0, 1, {(1, 2, 6): 1, (3, 4, 5): 1, (1, 3): 1}),
    (edge_dict_d3_n4, 3, 0, 0, {(1, 2): 1, (2, 3): 1, (1, 2, 3): 2}),
    (edge_dict_d3_n4, 3, 0, 1, {(1, 2): 2, (2, 3): 1, (1, 2, 3): 2, (1,): 2}),
    (edge_dict_d3_n4, 3, 0, 2, {(2, 3): 1, (1, 2, 3): 2, (1,): 1}),
])
def test_measure_Z(edge_dict, qudit_dim, qudit, state, new_edge_dict):

    if qudit_dim == 2:
        edge_list = [edge for edge in edge_dict.keys()]
        new_edge_list = [edge for edge in new_edge_dict.keys()]
        gs = QubitGraphState(edge_list)
        gs.measure_Z(qudit, state)
        assert gs == QubitGraphState(new_edge_list)
    else:
        gs = GraphState(edge_dict, qudit_dim)
        gs.measure_Z(qudit, state)
        assert gs == GraphState(new_edge_dict, qudit_dim)


def test_fusion():
    pass
